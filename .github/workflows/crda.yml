name: CRDA Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - master
      - develop/*
      - develop/dogfish

# These permissions are crucial to fix the 403 error
permissions:
  contents: read        # Read repository content
  pull-requests: write  # Add labels and comments to PRs
  issues: write        # Sometimes needed for PR operations
  actions: read        # Read action results

jobs:
  crda-scan:
    name: Scan project vulnerabilities with CRDA
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch the PR head commit for analysis
          ref: ${{ github.event.pull_request.head.sha }}
          
      # Step 2: Setup Node.js (since your project uses package.json)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Adjust to match your project's Node version
          cache: 'npm'
      
      # Step 3: Run CRDA vulnerability scan
      - name: Run CRDA Scan
        id: crda
        uses: redhat-actions/crda@v1
        with:
          # GitHub token for PR operations (CRITICAL for fixing 403 error)
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Snyk token for authentication (store in repository secrets)
          snyk_token: ${{ secrets.SNYK_TOKEN }}
          
          # Optional: Specify the manifest file explicitly
          # manifest_file: package.json
          
          # Optional: Specify the directory containing the manifest
          # manifest_directory: .
          
          # Consent for telemetry (set to false as shown in your logs)
          consent_telemetry: false
          
          # Fail the workflow if vulnerabilities are found
          # Options: 'never', 'warning', 'error'
          fail_on: 'error'
          
          # Upload SARIF results to GitHub Security tab
          upload_sarif: true
          
          # Optional: Set vulnerability severity threshold
          # severity_threshold: 'high'
          
      # Step 4: Upload SARIF results to GitHub Security
      - name: Upload SARIF results
        if: always() && steps.crda.outputs.sarif_report != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.crda.outputs.sarif_report }}
          category: 'CRDA'
        continue-on-error: true
      
      # Step 5: Comment on PR with scan results (optional)
      - name: Comment PR with scan results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scanStatus = '${{ steps.crda.outcome }}';
            const prNumber = context.issue.number;
            
            let comment = '## üîç CRDA Security Scan Results\n\n';
            
            if (scanStatus === 'success') {
              comment += '‚úÖ **Scan completed successfully** - No critical vulnerabilities found.';
            } else if (scanStatus === 'failure') {
              comment += '‚ùå **Scan detected vulnerabilities** - Please review the security findings.';
            } else {
              comment += '‚ö†Ô∏è **Scan completed with warnings** - Review recommended but not blocking.';
            }
            
            comment += '\n\nView detailed results in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            } catch (error) {
              console.log('Could not create comment:', error.message);
            }
        continue-on-error: true

      # Step 6: Add status check (this ensures the PR shows pass/fail status)
      - name: Set PR status check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scanOutcome = '${{ steps.crda.outcome }}';
            let state, description;
            
            switch(scanOutcome) {
              case 'success':
                state = 'success';
                description = 'CRDA scan passed - no critical vulnerabilities';
                break;
              case 'failure':
                state = 'failure';
                description = 'CRDA scan failed - vulnerabilities detected';
                break;
              default:
                state = 'pending';
                description = 'CRDA scan status unknown';
            }
            
            try {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: state,
                target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
                description: description,
                context: 'CRDA Security Scan'
              });
            } catch (error) {
              console.log('Could not set status:', error.message);
            }
        continue-on-error: true
